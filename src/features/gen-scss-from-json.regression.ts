// Import Vitest test functions
import { describe, it, expect, beforeAll, afterAll } from 'vitest';
// Import Node.js child_process for running the script
import { execSync } from 'child_process';
// Import Node.js fs functions for file operations
import { existsSync, readFileSync, rmSync, mkdirSync, copyFileSync } from 'fs';
// Import join for cross-platform path joining
import { join } from 'path';

// Define a temporary directory for the regression test
const TEMP_DIR = 'tmp_regression_test';
// Define a temp input folder inside the temp directory
const TEMP_INPUT = join(TEMP_DIR, 'input');
// Define the output SCSS file path
const TEMP_OUTFILE = join(TEMP_DIR, 'out.scss');
// Define the output log file path (not used directly, but logs go here)
const TEMP_LOG = join(TEMP_DIR, 'out.log');

// Path to the folders containing test JSONs
const BASELINE_JSONS = 'src/features/test_jsons/baseline-test';
const TEST1_JSONS = 'src/features/test_jsons/test1_and3';
const TEST2_JSONS = 'src/features/test_jsons/test2';
const TEST4_JSONS = 'src/features/test_jsons/test4';

// Logging helper for regression test output
const REG_LOG_DIR = 'test-logs';
const REG_LOG_FILE = join(REG_LOG_DIR, 'regression.log');
function logRegression(message: string) {
	if (!existsSync(REG_LOG_DIR)) mkdirSync(REG_LOG_DIR, { recursive: true });
	const timestamp = new Date().toISOString();
	require('fs').writeFileSync(REG_LOG_FILE, `[${timestamp}] ${message}\n`, { flag: 'a' });
}

// Main regression test suite
describe('gen-scss-from-json regression (e2e)', () => {
	// Before all tests, clean up and set up temp dirs
	beforeAll(() => {
		// Remove temp directory if it exists
		if (existsSync(TEMP_DIR)) rmSync(TEMP_DIR, { recursive: true, force: true });
		// Create temp input directory
		mkdirSync(TEMP_INPUT, { recursive: true });
	});

	// After all tests, clean up temp dirs
	afterAll(() => {
		if (existsSync(TEMP_DIR)) rmSync(TEMP_DIR, { recursive: true, force: true });
	});

	// The main regression test: run script with baseline, then test1a, then test1b, and check the log/SCSS
	it('detects 3 changed variables between test1a and test1b after baseline', () => {
		logRegression('START: detects 3 changed variables between test1a and test1b after baseline');
		// Step 1: Copy all baseline-test JSONs to temp input
		const { readdirSync } = require('fs');
		for (const file of readdirSync(BASELINE_JSONS)) {
			if (file.endsWith('.json')) {
				copyFileSync(join(BASELINE_JSONS, file), join(TEMP_INPUT, file));
			}
		}
		// Baseline run
		execSync(
			`npx ts-node src/features/gen-scss-from-json.ts --override paths.inputDirJson=src/features/test_jsons/baseline-test --override paths.OUTFILE_SCSS=${TEMP_OUTFILE} --override paths.logDir=${TEMP_DIR} --no-logs`,
			{ stdio: 'inherit' }
		);
		// Test run 1
		execSync(
			`npx ts-node src/features/gen-scss-from-json.ts --override paths.inputDirJson=src/features/test_jsons/test1_and3 --override paths.OUTFILE_SCSS=${TEMP_OUTFILE} --override paths.logDir=${TEMP_DIR} --no-logs`,
			{ stdio: 'inherit' }
		);
		// Read the generated SCSS file after second run
		const scssB = readFileSync(TEMP_OUTFILE, 'utf8');
		// Check that the SCSS file contains the auto-generated marker
	expect(scssB, 'SCSS output should contain AUTO-GENERATED BY SCRIPT').toContain('AUTO-GENERATED BY SCRIPT');
	logRegression('PASS: detects 3 changed variables between test1a and test1b after baseline');
	// (Log file checks removed: regression test now only checks SCSS output)
	});
	it('test 2: baseline → test1_and3 → test2 (Removes 3 variables: should be visible in SCSS as removed)', () => {
		logRegression('START: test 2: baseline → test1_and3 → test2');
		const { readdirSync } = require('fs');
		// Clean and set up temp input
		if (existsSync(TEMP_INPUT)) rmSync(TEMP_INPUT, { recursive: true, force: true });
		mkdirSync(TEMP_INPUT, { recursive: true });
		// Copy baseline JSONs
		for (const file of readdirSync(BASELINE_JSONS)) {
			if (file.endsWith('.json')) {
				copyFileSync(join(BASELINE_JSONS, file), join(TEMP_INPUT, file));
			}
		}
		// Baseline run
		execSync(
			`npx ts-node src/features/gen-scss-from-json.ts --override paths.inputDirJson=${BASELINE_JSONS} --override paths.OUTFILE_SCSS=${TEMP_OUTFILE} --override paths.logDir=${TEMP_DIR} --no-logs`,
			{ stdio: 'inherit' }
		);
		// Run with test1_and3
		execSync(
			`npx ts-node src/features/gen-scss-from-json.ts --override paths.inputDirJson=${TEST1_JSONS} --override paths.OUTFILE_SCSS=${TEMP_OUTFILE} --override paths.logDir=${TEMP_DIR} --no-logs`,
			{ stdio: 'inherit' }
		);
		// Run with test2
		execSync(
			`npx ts-node src/features/gen-scss-from-json.ts --override paths.inputDirJson=${TEST2_JSONS} --override paths.OUTFILE_SCSS=${TEMP_OUTFILE} --override paths.logDir=${TEMP_DIR} --no-logs`,
			{ stdio: 'inherit' }
		);
		const scss = readFileSync(TEMP_OUTFILE, 'utf8');
	expect(scss, 'SCSS output should contain AUTO-GENERATED BY SCRIPT').toContain('AUTO-GENERATED BY SCRIPT');
	logRegression('PASS: test 2: baseline → test1_and3 → test2');
	});

	it('test 3: baseline → test2 → test1_and3 (Adds 3 variables: should be visible in SCSS as added)', () => {
		logRegression('START: test 3: baseline → test2 → test1_and3');
		const { readdirSync } = require('fs');
		// Clean and set up temp input
		if (existsSync(TEMP_INPUT)) rmSync(TEMP_INPUT, { recursive: true, force: true });
		mkdirSync(TEMP_INPUT, { recursive: true });
		// Copy baseline JSONs
		for (const file of readdirSync(BASELINE_JSONS)) {
			if (file.endsWith('.json')) {
				copyFileSync(join(BASELINE_JSONS, file), join(TEMP_INPUT, file));
			}
		}
		// Baseline run
		execSync(
			`npx ts-node src/features/gen-scss-from-json.ts --override paths.inputDirJson=${BASELINE_JSONS} --override paths.OUTFILE_SCSS=${TEMP_OUTFILE} --override paths.logDir=${TEMP_DIR} --no-logs`,
			{ stdio: 'inherit' }
		);
		// Run with test2
		execSync(
			`npx ts-node src/features/gen-scss-from-json.ts --override paths.inputDirJson=${TEST2_JSONS} --override paths.OUTFILE_SCSS=${TEMP_OUTFILE} --override paths.logDir=${TEMP_DIR} --no-logs`,
			{ stdio: 'inherit' }
		);
		// Run with test1_and3
		execSync(
			`npx ts-node src/features/gen-scss-from-json.ts --override paths.inputDirJson=${TEST1_JSONS} --override paths.OUTFILE_SCSS=${TEMP_OUTFILE} --override paths.logDir=${TEMP_DIR} --no-logs`,
			{ stdio: 'inherit' }
		);
		const scss = readFileSync(TEMP_OUTFILE, 'utf8');
	expect(scss, 'SCSS output should contain AUTO-GENERATED BY SCRIPT').toContain('AUTO-GENERATED BY SCRIPT');
	logRegression('PASS: test 3: baseline → test2 → test1_and3');
	});

	it('test 4: baseline → test1_and3 → test4 (Adds 1 theme: added theme should be visible in SCSS)', () => {
		logRegression('START: test 4: baseline → test1_and3 → test4');
		const { readdirSync } = require('fs');
		// Clean and set up temp input
		if (existsSync(TEMP_INPUT)) rmSync(TEMP_INPUT, { recursive: true, force: true });
		mkdirSync(TEMP_INPUT, { recursive: true });
		// Copy baseline JSONs
		for (const file of readdirSync(BASELINE_JSONS)) {
			if (file.endsWith('.json')) {
				copyFileSync(join(BASELINE_JSONS, file), join(TEMP_INPUT, file));
			}
		}
		// Baseline run
		execSync(
			`npx ts-node src/features/gen-scss-from-json.ts --override paths.inputDirJson=${BASELINE_JSONS} --override paths.OUTFILE_SCSS=${TEMP_OUTFILE} --override paths.logDir=${TEMP_DIR} --no-logs`,
			{ stdio: 'inherit' }
		);
		// Run with test1_and3
		execSync(
			`npx ts-node src/features/gen-scss-from-json.ts --override paths.inputDirJson=${TEST1_JSONS} --override paths.OUTFILE_SCSS=${TEMP_OUTFILE} --override paths.logDir=${TEMP_DIR} --no-logs`,
			{ stdio: 'inherit' }
		);
		// Run with test4
		execSync(
			`npx ts-node src/features/gen-scss-from-json.ts --override paths.inputDirJson=${TEST4_JSONS} --override paths.OUTFILE_SCSS=${TEMP_OUTFILE} --override paths.logDir=${TEMP_DIR} --no-logs`,
			{ stdio: 'inherit' }
		);
		const scss = readFileSync(TEMP_OUTFILE, 'utf8');
	expect(scss, 'SCSS output should contain AUTO-GENERATED BY SCRIPT').toContain('AUTO-GENERATED BY SCRIPT');
	logRegression('PASS: test 4: baseline → test1_and3 → test4');
	});

});
